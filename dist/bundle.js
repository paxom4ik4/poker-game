!function(e){var t={};function s(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,s),r.l=!0,r.exports}s.m=e,s.c=t,s.d=function(e,t,i){s.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},s.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)s.d(i,r,function(t){return e[t]}.bind(null,r));return i},s.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return s.d(t,"a",t),t},s.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},s.p="",s(s.s=0)}([function(e,t,s){"use strict";function i(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}s.r(t);class r{constructor(e){i(this,"_maxCardsOnHands",2),i(this,"gameState",{cards:[],money:1e3,playerBet:0}),i(this,"positionState",{hasDealerButton:!1,isSmallBlind:!1,isBigBlind:!1,isLeave:!1,isCurrentMove:!1,isMadeMove:!1}),this.name=e}takeCards(e){for(let t=0;t<this._maxCardsOnHands;t++)this.gameState.cards[t]=e.giveCard()}check(){console.log(this.name+" has checked")}call(e){this.gameState.moeney>=e?(this.gameState.money-=e,this.gameStat.playerBet=e,this.positionState.isMadeMove=!0):(this.gameState.playerBet=this.gameState.money,this.gameState.money-=this.gameState.money,this.positionState.isMadeMove=!0)}raise(e){if(e<this.gameState.currentBet)return"ERROR";this.gameState.playerBet+=e;game.players}fold(){this.cards=[],this.positionState.isLeave=!0,console.log(this.name+" folds cards")}}class a{constructor(e,t){this.cardValue=e,this.cardSuit=t}}function n(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}class l{constructor(){n(this,"cardSuits",["Hearts","Spades","Diamonds","Clubs"]),n(this,"cardValues",["2","3","4","5","6","7","8","9","10","J","Q","K","A"]),n(this,"cards",[]),this.generateDeck()}generateDeck(){for(let e of this.cardSuits)for(let t of this.cardValues)this.cards.push(new a(t,e))}shuffleCards(){this.cards.sort(()=>Math.random()-.5)}giveCard(){return this.cards.pop()}}function o(e,t,s){return t in e?Object.defineProperty(e,t,{value:s,enumerable:!0,configurable:!0,writable:!0}):e[t]=s,e}new class{constructor(e,t){o(this,"players",[new r("Pavel"),new r("Konstantin"),new r("Jenya"),new r("David")]),o(this,"cardsOnTable",[]),o(this,"bank",0),o(this,"currentPlayer",0),o(this,"currentPlayerMove",0),o(this,"currentBet",this.bigBlind),this.smallBlind=e,this.bigBlind=t}startGame(){this.startPart()}startPart(){this.players.forEach(e=>console.log(e.name+" has joined the game"));this.players;this.deck=new l,console.log("Deck has created"),this.deck.shuffleCards(),console.log("Deck has shuffle"),this.players.map(e=>{e.takeCards(this.deck),console.log(e.name+" got cards")}),this.setBlinds(),this.updateBlinds()}openCard(){switch(this.cardsOnTable.length){case 0:for(let e=0;e<3;e++)this.cardsOnTable.push(this.deck.giveCard());break;case 5:break;default:this.cardsOnTable.push(this.deck.giveCard())}}setBlinds(){switch(this.currentPlayer){case this.players.length-1:this.players[this.players.length-1].gameState.currentBet=this.smallBlind,this.players[this.players.length-1].positionState.isSmallBlind=!0,this.players[0].gameState.currentBet=this.bigBlind,this.players[0].positionState.isBigBlind=!0,this.players[this.currentPlayer-1].positionState.isCurrentMove=!0;break;case this.players.length-2:this.players[this.currentPlayer].gameState.currentBet=this.smallBlind,this.players[this.currentPlayer].positionState.isSmallBlind=!0,this.players[this.currentPlayer+1].gameState.currentBet=this.bigBlind,this.players[this.currentPlayer+1].positionState.isBigBlind=!0,this.players[0].positionState.isCurrentMove=!0;break;default:this.players[this.currentPlayer].gameState.currentBet=this.smallBlind,this.players[this.currentPlayer].positionState.isSmallBlind=!0,this.players[this.currentPlayer+1].gameState.currentBet=this.bigBlind,this.players[this.currentPlayer+1].positionState.isBigBlind=!0,this.players[this.currentPlayer+2].positionState.isCurrentMove=!0}this.players.forEach(e=>{console.group(e.name+" info:"),console.log("current bet: "+e.gameState.currentBet),console.log("is small blind: "+e.positionState.isSmallBlind),console.log("is big blind: "+e.positionState.isBigBlind),console.log("current money: "+e.gameState.money),console.log("current move: "+e.positionState.isCurrentMove),console.log("cards: "+e.cards),console.groupEnd()})}defaultBlind(){this.players.forEach(e=>{e.gameState={cards:[],money:e.gameState.money,currentBet:0},e.positionState={hasDealerButton:!1,isSmallBlind:!1,isBigBlind:!1,isLeave:e.positionState.isLeave,isCurrentMove:e.positionState.isCurrentMove}})}updateBlinds(){this.defaultBlind(),this.currentPlayer===this.players.length-1?(this.currentPlayer=0,this.setBlinds()):(this.currentPlayer++,this.setBlinds())}}(10,20).startGame()}]);