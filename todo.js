// TODO:
// prod. by: Paxom4ik, Kokosik11 <- 
// Array of objects for cards
// Cards value: 2, 3, 4, 5, 6, 7, 8, 9, 10, J, Q, K, A.
// Cards suits: Heart - червы, Spades - пики, Diamonds - Бубны, Clubs - трефы (крести).
// 
// 1. Даем классу Game поле с названием gameState. Изначально равен 0.
// 2. Когда каждый игрок сделает свой ход => Делаем gameState++ 
// 3. Вызываем функцию (Которую создадим) которая в завимисости от gameState выкладывает на стол карты
// 4. Если gameState === 1 то 3 карты, если gameState === 2 || gameState === 3 то 1 карту
// 5. финал. Если gameState === 4 то функция поймет что все круги игры прошли и вызовет функцию (Которую создадим)
// Которая проверит кто победил.
//
// Определяем состояние игры по количеству карт на столе <- High priority 
//
// Подумать: над реализацией комбинации карт
//
// Определиться со значением карт (со страшнинством карт)
//
// Класс игрок и его методы
// 
// Метод или класс партии игры, где будет отслеживаться действия игрока 
//
// Определяем кто является малым блаиндом. Так как нас 2 человека ходит тот, у кого
// Малый блайнд. Если более двух человек, то ходит человек, сидящий после 
// большого блайнда. Просто в нашем случае как раз Малый и является 
// сидящим после большого
//  big blind
//  small blind
//
//  .Pre-flop:
//  0) Игроки получают кнопку диллера, малый и большой блайнд
//  1) Игроки получают карты
//  2) Ставятся начальные ставки в зависимости от блайндов 
//  3) Игрок, сидяшщий после большого блаинда делает ход 
//  4) После всех ходов, деньги идут в банк, а дилер открывает флоп
//  .Flop:
//  5) Дилер открывает 3 карты
//  6) Первый ход делает человек, который сидит после человека, который делал ход на пре-флопе 
//  7) После всех ходов, деньги идут в банк, а дилер открывает терн
//  .Tern:
//  8) Дилер открывает 1 карту 
//  9) Первый ход делает человек, который сидит после человека, который делал ход на флопе 
// 10) После всех ходов, деньги идут в банк, а дилер открывает ривер
//  .River:
// 11) Дилер открывает 1 карту
// 12) Первый ход делает человек, который сидит после человека, который делал ход на риверe 
// 13) После всех ходов, деньги идут в банк, а дилер открывает просит вскрыть карты
// 14) Игрок с самой сильной комбинацией - забирает всё.
// 15) Карты перемешиваются, раздаются блайнды и кнопка и игра начинается снова 
//
//  Реализовать игровую партию
//  1) Доделать методы (реализовать новые, пересмотреть готовые)
//  2) Имитировать реальную игру, с помощью вызова данных методов
//  3) В случае появление ошибок - дебаг! GLHF
//
//  Подумать над алгоритмом сравнения комбинаций карт. Определение победителя.
//
//  Игровая партия:
//  1)Реализовать ожидание действий